group 'zo.co.movinggauteng'
version '0.0.1'

apply plugin: 'idea'
apply plugin: 'application'
apply plugin: 'com.google.protobuf'
apply plugin: 'java'
apply plugin: 'kotlin'
// Use the osdetector-gradle-plugin
apply plugin: "com.google.osdetector"

buildscript {
    ext.kotlin_version = '1.2.50'
    ext.grpc_version = '1.12.0'

    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.5'
        classpath 'com.google.gradle:osdetector-gradle-plugin:1.4.0'
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

def tcnative_classifier = osdetector.classifier
// Fedora variants use a different soname for OpenSSL than other linux distributions
// (see http://netty.io/wiki/forked-tomcat-native.html).
if (osdetector.os == "linux" && osdetector.release.isLike("fedora")) {
    tcnative_classifier += "-fedora"
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://jitpack.io" }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-runtime:$kotlin_version"

    implementation 'io.lettuce:lettuce-core:5.1.0.M1'

    implementation "io.grpc:grpc-netty:$grpc_version"
    implementation "io.grpc:grpc-protobuf:$grpc_version"
    implementation "io.grpc:grpc-stub:$grpc_version"

    implementation 'io.jaegertracing:jaeger-core:0.28.0'
    implementation 'io.opentracing.contrib:opentracing-grpc:0.0.5'
    implementation 'io.github.cdimascio:java-dotenv:3.1.1'

    testImplementation group: 'junit', name: 'junit', version: '4.12'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.5.1"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:$grpc_version"
        }
    }

    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
    generatedFilesBaseDir = "$projectDir/src/generated"
}

sourceSets {
    main {
        proto {
            srcDir 'src/main/proto'
        }
        java {
            // include self written and generated code
            srcDirs 'src/main/java', 'src/generated/main/java', 'src/generated/main/grpc'
        }
    }
}

mainClassName = 'za.co.movinggauteng.geofeancy.MainKt'

clean {
    delete "${projectDir}/src/generated"
}

// Let intellij projects refer to generated code
idea {
    module {
        sourceDirs += file("${projectDir}/src/generated/main/java")
        sourceDirs += file("${projectDir}/src/generated/main/grpc")
    }
}

jar {
    zip64 true
    from {
        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

task fatJar(type: Jar) {
    zip64 true
    manifest {
        attributes 'Implementation-Title': 'geofancy',
                'Implementation-Version': version,
                'Main-Class': 'za.co.movinggauteng.geofancy.MainKt'
    }
    baseName = project.name
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}